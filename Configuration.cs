using System;
using System.IO;

using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Configuration;

namespace dwmuller.HomeNet
{
    public class Configuration
    {
        public Configuration(HttpRequest req)
        {
            var root = new ConfigurationBuilder().AddEnvironmentVariables().Build();
            root.Bind(this);
        }

        /// <summary>
        /// The URI of the search service.
        /// </summary>
        public Uri SearchServiceUri { get; set; }

        /// <summary>
        /// The name of the search index in the search service.
        /// </summary>
        public string SearchIndexName { get; set; } = string.Empty;

        public string SearchServiceQueryApiKey { get; set; } = string.Empty;

        /// <summary>
        /// The API key used to perform administrative functions in the search
        /// service. In Azure, this is the secondary admin key of the search
        /// service.
        /// </summary>
        public string SearchServiceAdminApiKey { get; set; } = string.Empty;

        /// <summary>
        /// The key used to access the GitHub API. Generated by a GitHub user
        /// with access to the source repository.
        /// </summary>
        public string GitHubApiKey { get; set; } = string.Empty;

        /// <summary>
        /// The application name given to the GitHub API. 
        /// </summary>
        public string GitHubAppName { get; set; } = string.Empty;

        /// <summary>
        /// Name of the GitHub repository containing source files to be indexed. 
        /// </summary>
        public string GitHubRepoName { get; set; } = string.Empty;

        /// <summary>
        /// Name of the owner of the GitHub repository containing source files
        /// to be indexed.
        /// </summary>
        public string GitHubRepoOwner { get; set; } = string.Empty;

        /// <summary>
        /// Directory containing files to be included in the search index. Must
        /// begin end end with a path separator.
        /// </summary>
        public string GitHubRepoDocRoot { get; set; } = string.Empty;

        /// <summary>
        /// Template string for a document's URL path. Format parameters, in
        /// order, are.
        /// <list type="bullet">
        /// <item>The source file's directory relative to <see
        /// cref="GitHubRepoDocRoot"/>, with a trailing but not a leading path
        /// separator.</item>
        /// <item>The source file's base name.</item>
        /// <item>The source file's extension, including the period.</item.
        /// </summary>
        public string DocPathTemplate { get; set; } = string.Empty;

        /// <summary>
        /// Given a relative repository path of a source file, returns the URL
        /// path for the corresponding document.
        /// </summary>
        /// <param name="itemPath"></param>
        /// <returns></returns>
        public string RepoPathToDocPath(string itemPath)
        {
            var path = Path.GetDirectoryName(itemPath);
            if (!string.IsNullOrEmpty(path))
                path += "/";
            var name = Path.GetFileNameWithoutExtension(itemPath);
            var ext = Path.GetExtension(itemPath);
            return string.Format(DocPathTemplate, path, name, ext);
        }

    }
}
